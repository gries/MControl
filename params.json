{"name":"Mcontrol","tagline":"MControl is an easy-to-use minecraft server control library.","body":"MControl\r\n========\r\n\r\nMControl is a library to controll a minecraft-server via. the rcon protocol.\r\n\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/33bb71fa-7445-42bd-a1e4-02f956b73ccc/big.png)](https://insight.sensiolabs.com/projects/33bb71fa-7445-42bd-a1e4-02f956b73ccc)\r\n\r\n[![Build Status](https://travis-ci.org/gries/MControl.png?branch=master)](https://travis-ci.org/gries/MControl)\r\n\r\nInstallation\r\n------------\r\n\r\nMControl can be installed via. Composer:\r\n\r\n    {\r\n        \"require\": {\r\n            \"gries/MControl\": \"dev-master\"\r\n        }\r\n    }\r\n\r\nBasic usage\r\n-----------\r\n    use gries\\MControl\\Server\\Commander;\r\n    use gries\\MControl\\Server\\Rcon\\RconManager;\r\n\r\n    // create a RconConnection\r\n    $rcon = new RconManager('localhost', 25575, 'p4ssw0rd');\r\n\r\n    // create a Commander\r\n    $commander = new Commander($rcon);\r\n\r\n    // set the server-time\r\n    $commander->setTime('12000');\r\n\r\n    // listPlayers\r\n    $players = $commander->listPlayers(); // -> array('playerx', 'playery');\r\n\r\n    // teleport one player to another\r\n    $commander->teleport(array('playerx', 'playery'));\r\n\r\n    // locate a player\r\n    $location = $commander->locate('playerx');  // -> array('x' => 157, 'y' => 50, 'z' => -54);\r\n\r\nBuilding structures\r\n-------------------\r\n\r\n    ....\r\n    use gries\\MControl\\Builder\\Block;\r\n    use gries\\MControl\\Builder\\Structure;\r\n    use gries\\MControl\\Server\\StructureBuilder;\r\n    ...\r\n\r\n    // create a structure-builder\r\n    $structureBuilder = new StructureBuilder($commander);\r\n\r\n    // create a new structure\r\n    $structure = new Structure();\r\n\r\n    // add some blocks\r\n    // in this case build a sand tower that is five blocks high\r\n    for ($i = 0; $i < 5; $i++)\r\n    {\r\n        $structure->createBlock('sand', array('x' => 1, 'y' => $i, 'z' => 1));\r\n    }\r\n\r\n    // add a row of 3 sand blocks on the Y axis\r\n    // starting on 1:1:1\r\n    $structure->addRow('y', 'sand', 3);\r\n\r\n    // build it on the server\r\n    $structureBuilder->build($structure);\r\n\r\nConverting images to Structures\r\n-------------------------------\r\nTo convert images to structures the imagick extension for PHP is required.\r\n\r\nThe example below will build a structure that is 5 blocks high, and is made of air and leaves.\r\nEvery black pixel will be leaves every white pixel will be air. The structure will be placed on x -> 33, z -> 19\r\n\r\nThe result can be seen in this video: https://vimeo.com/79598411\r\n\r\n    $converter = new ImageToStructureConverter();\r\n    $converter->setBlackBlockType('leaves');\r\n    $converter->setWhiteBlockType('air');\r\n\r\n    $image     = new Imagick('test.png');\r\n    $structure = $converter->convert($image, 5);\r\n    $structureBuilder->build($structure,\r\n        array('x' => '-33',\r\n              'y' => '3',\r\n              'z' => '19')\r\n    );\r\n\r\nSaving structures for further use\r\n---------------------------------\r\nYou can persist structures for later use using the StructureRepository.\r\nCurrently this Repository uses a sqlite database to store the data by default,\r\nthis behavior can be easily changed by creating a custom EntityManager by yourself\r\nand passing it to the StructureRepositoryFactory.\r\n\r\n    // bootstrap doctrine\r\n    $entityManager = require_once __DIR__ . '/bootstrap.php';\r\n\r\n    // create a repository\r\n    $factory = new StructureRepositoryFactory();\r\n    $repository = $factory->create($entityManager);\r\n\r\n    // create a new structure\r\n    $structure = new Structure();\r\n    $structure->createBlock('iron', array('x' => 1, 'y' => 1, 'z' => 1));\r\n    $structure->setName('greatness');\r\n\r\n    // save it to the database\r\n    $repository->add($structure);\r\n\r\n    // get it from the database\r\n    $repository->getByName('greatness');\r\n\r\nCurrently these Commands are available for the Commander\r\n-------------------------------------------------------\r\n\r\n- say\r\n- listPlayers\r\n- locatePlayer\r\n- teleport\r\n- give\r\n- setWeather\r\n- setTime\r\n- setBlock\r\n\r\n\r\nRunning the tests\r\n-----------------\r\n    bin/phpspec run\r\n\r\nContribute!\r\n-----------\r\nFeel free to give me feedback/feature-request/bug-reports via. github issues.\r\nOr just send me a pull-request :)\r\n\r\n\r\nAuthor\r\n------\r\n\r\n- [Christoph Rosse](http://twitter.com/griesx)\r\n\r\nLicense\r\n-------\r\n\r\nFor the full copyright and license information, please view the LICENSE file that was distributed with this source code.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}